package com.bpdb.dms.controller;

import com.bpdb.dms.entity.*;
import com.bpdb.dms.service.MachineLearningService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * REST Controller for Machine Learning Management
 */
@RestController
@RequestMapping("/api/ml")
@CrossOrigin(origins = "*")
public class MachineLearningController {
    
    @Autowired
    private MachineLearningService mlService;
    
    /**
     * Create a new ML model
     */
    @PostMapping("/models")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<MLModel> createMLModel(@RequestBody MLModel mlModel) {
        try {
            MLModel created = mlService.createMLModel(
                mlModel.getModelName(),
                mlModel.getModelType(),
                mlModel.getModelDescription(),
                mlModel.getModelVersion(),
                mlModel.getTrainingData(),
                mlModel.getModelParameters(),
                mlModel.getPerformanceMetrics()
            );
            
            return ResponseEntity.ok(created);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get all ML models
     */
    @GetMapping("/models")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<Page<MLModel>> getAllMLModels(
            @RequestParam(required = false) ModelType modelType,
            @RequestParam(required = false) ModelStatus status,
            @RequestParam(required = false) String version,
            Pageable pageable) {
        
        Page<MLModel> models = mlService.getMLModels(modelType, status, version, pageable);
        
        return ResponseEntity.ok(models);
    }
    
    /**
     * Get ML model by ID
     */
    @GetMapping("/models/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<MLModel> getMLModelById(@PathVariable Long id) {
        try {
            MLModel model = mlService.getMLModelById(id);
            return ResponseEntity.ok(model);
            
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * Update ML model
     */
    @PutMapping("/models/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<MLModel> updateMLModel(@PathVariable Long id, 
                                                @RequestBody MLModel mlModel) {
        try {
            MLModel updated = mlService.updateMLModel(id, mlModel);
            return ResponseEntity.ok(updated);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Delete ML model
     */
    @DeleteMapping("/models/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteMLModel(@PathVariable Long id) {
        try {
            mlService.deleteMLModel(id);
            return ResponseEntity.ok().build();
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Train ML model
     */
    @PostMapping("/models/{id}/train")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> trainMLModel(@PathVariable Long id) {
        try {
            Map<String, Object> result = mlService.trainMLModel(id);
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Deploy ML model
     */
    @PostMapping("/models/{id}/deploy")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> deployMLModel(@PathVariable Long id) {
        try {
            Map<String, Object> result = mlService.deployMLModel(id);
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get ML model predictions
     */
    @PostMapping("/models/{id}/predict")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<Map<String, Object>> getMLModelPredictions(@PathVariable Long id,
                                                                     @RequestBody Map<String, Object> inputData) {
        try {
            Map<String, Object> predictions = mlService.getMLModelPredictions(id, inputData);
            return ResponseEntity.ok(predictions);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get ML model performance
     */
    @GetMapping("/models/{id}/performance")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<Map<String, Object>> getMLModelPerformance(@PathVariable Long id) {
        try {
            Map<String, Object> performance = mlService.getMLModelPerformance(id);
            return ResponseEntity.ok(performance);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get ML model statistics
     */
    @GetMapping("/statistics")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<Map<String, Object>> getMLModelStatistics() {
        Map<String, Object> statistics = mlService.getMLModelStatistics();
        return ResponseEntity.ok(statistics);
    }
    
    /**
     * Get ML model logs
     */
    @GetMapping("/models/{id}/logs")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<List<Map<String, Object>>> getMLModelLogs(@PathVariable Long id) {
        List<Map<String, Object>> logs = mlService.getMLModelLogs(id);
        return ResponseEntity.ok(logs);
    }
    
    /**
     * Get ML insights
     */
    @GetMapping("/insights")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER', 'VIEWER')")
    public ResponseEntity<Map<String, Object>> getMLInsights() {
        Map<String, Object> insights = mlService.getMLInsights();
        return ResponseEntity.ok(insights);
    }
    
    /**
     * Get ML recommendations
     */
    @GetMapping("/recommendations")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER', 'VIEWER')")
    public ResponseEntity<List<Map<String, Object>>> getMLRecommendations(
            @RequestParam(required = false) String userId,
            @RequestParam(required = false) String context) {
        
        List<Map<String, Object>> recommendations = mlService.getMLRecommendations(userId, context);
        return ResponseEntity.ok(recommendations);
    }
}
