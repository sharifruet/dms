package com.bpdb.dms.controller;

import com.bpdb.dms.entity.*;
import com.bpdb.dms.service.EnterpriseIntegrationService;
import com.bpdb.dms.service.AdvancedAnalyticsService;
import com.bpdb.dms.service.MachineLearningService;
import com.bpdb.dms.service.SystemHealthMonitoringService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * REST Controller for Enterprise Integration Management
 */
@RestController
@RequestMapping("/api/integrations")
@CrossOrigin(origins = "*")
public class EnterpriseIntegrationController {
    
    @Autowired
    private EnterpriseIntegrationService integrationService;
    
    /**
     * Create a new integration configuration
     */
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<IntegrationConfig> createIntegration(@RequestBody IntegrationConfig integrationConfig) {
        try {
            IntegrationConfig created = integrationService.createIntegration(
                integrationConfig.getIntegrationName(),
                integrationConfig.getIntegrationType(),
                integrationConfig.getEndpointUrl(),
                integrationConfig.getAuthenticationType(),
                integrationConfig.getCredentials(),
                integrationConfig.getConfiguration(),
                integrationConfig.getIsEnabled()
            );
            
            return ResponseEntity.ok(created);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get all integrations
     */
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<Page<IntegrationConfig>> getAllIntegrations(
            @RequestParam(required = false) IntegrationType integrationType,
            @RequestParam(required = false) IntegrationStatus status,
            @RequestParam(required = false) String environment,
            Pageable pageable) {
        
        Page<IntegrationConfig> integrations = integrationService.getIntegrations(
            integrationType, status, environment, pageable);
        
        return ResponseEntity.ok(integrations);
    }
    
    /**
     * Get integration by ID
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<IntegrationConfig> getIntegrationById(@PathVariable Long id) {
        try {
            IntegrationConfig integration = integrationService.getIntegrationById(id);
            return ResponseEntity.ok(integration);
            
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * Update integration
     */
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<IntegrationConfig> updateIntegration(@PathVariable Long id, 
                                                             @RequestBody IntegrationConfig integrationConfig) {
        try {
            IntegrationConfig updated = integrationService.updateIntegration(id, integrationConfig);
            return ResponseEntity.ok(updated);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Delete integration
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteIntegration(@PathVariable Long id) {
        try {
            integrationService.deleteIntegration(id);
            return ResponseEntity.ok().build();
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Test integration connection
     */
    @PostMapping("/{id}/test")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<Map<String, Object>> testIntegration(@PathVariable Long id) {
        try {
            Map<String, Object> result = integrationService.testIntegration(id);
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get integration statistics
     */
    @GetMapping("/statistics")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<Map<String, Object>> getIntegrationStatistics() {
        Map<String, Object> statistics = integrationService.getIntegrationStatistics();
        return ResponseEntity.ok(statistics);
    }
    
    /**
     * Get integration logs
     */
    @GetMapping("/{id}/logs")
    @PreAuthorize("hasAnyRole('ADMIN', 'OFFICER')")
    public ResponseEntity<List<Map<String, Object>>> getIntegrationLogs(@PathVariable Long id) {
        List<Map<String, Object>> logs = integrationService.getIntegrationLogs(id);
        return ResponseEntity.ok(logs);
    }
}
